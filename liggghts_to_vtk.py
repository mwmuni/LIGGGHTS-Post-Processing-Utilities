import argparse
import os
import itertools
import threading

class myThread (threading.Thread):
   def __init__(self, threadID, file, s):
      threading.Thread.__init__(self)
      self.threadID = threadID
      self.file = file
      self.s = s
   def run(self):
      process(self.file, self.s)

def process(file, s):
    with open(file, 'r') as f:
        sub_file_lines = []
        file_timestep = int(file[len(s[0]):-len(s[1])])
        lines = f.readlines()

        points = []
        id = []
        type = []
        vel = []
        radius = []
        density = []

        point_data = lines[9:]
        
        header = '# vtk DataFile Version 2.0\nGenerated by Matt\nASCII\nDATASET POLYDATA\nPOINTS ' + str(len(point_data)) + ' float\n'

        if point_data:
            if len(point_data[-1]) < 3:
                point_data = point_data[:-1]

        for line in point_data:
            split_data = line.split(' ')
            points.append([split_data[2], split_data[3], split_data[4]])
            id.append(split_data[0])
            type.append(split_data[1])
            vel.append([split_data[5], split_data[6], split_data[7]])
            radius.append(split_data[8])
            density.append(split_data[9].strip())
        
        sub_file_lines.append(header)

        for point in points:
            sub_file_lines.append(' '.join(point) + '\n')
        
        sub_file_lines.append('VERTICES ' + str(len(point_data)) + ' ' + str(len(point_data) * 2) + '\n')

        for i in range(len(point_data)):
            sub_file_lines.append(' '.join((type[i], str(i))) + '\n')
        
        sub_file_lines.append('POINT_DATA ' + str(len(point_data)) + '\n')
        
        if(vel):
            sub_file_lines.append('VECTORS v float\n')

            for v in vel:
                sub_file_lines.append(' '.join(v) + '\n')
            
            sub_file_lines.append('SCALARS radius float 1\n LOOKUP_TABLE default\n')

            for r in radius:
                sub_file_lines.append(r + '\n')
            
            sub_file_lines.append('SCALARS type float 1\nLOOKUP_TABLE default\n')

            for t in type:
                sub_file_lines.append(str(float(t)) + '\n')
            
            sub_file_lines.append('SCALARS id float 1\nLOOKUP_TABLE default\n')

            for i in id:
                sub_file_lines.append(str(float(i)) + '\n')

            sub_file_lines.append('SCALARS density float 1\nLOOKUP_TABLE default\n')

            for d in density:
                sub_file_lines.append(str(float(d)) + '\n')
        
        outfile = open(s[0] + str(file_timestep).zfill(4) + '.vtk', 'w')
        outfile.writelines(sub_file_lines)
        outfile.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument('file_pattern', type=str,
                        help='The pattern for the dump files (e.g. "dump_*.liggghts")')

    args = parser.parse_args()

    files = os.listdir('.')
    sim_files = []
    for file in files:
        s = args.file_pattern.split('*')
        if file.startswith(s[0]) and file.endswith(s[1]):
            sim_files.append(file)

    x = itertools.count()
    p = []
    for file in sim_files:
        p.append(myThread(next(x), file, s))

    step=24
    for i in range(step, len(sim_files), step):
        print('Reading [' + str(i-step) + ':' + str(i-1) + '] of ' + str(len(sim_files)))
        for j in range(i-step, i):
            p[j].start()
        for proc in p[i-step:i]:
            p[j].join()
        while not threading.activeCount() <= 2:
            pass

    print('Reading [' + str(len(p) - (len(p)%step)) + ':' + str(len(p)) + '] of ' + str(len(p)))
    for proc in p[len(p) - (len(p)%step):len(p)+1]:
        proc.start()
    for proc in p[len(p) - (len(p)%step):len(p)+1]:
        proc.join()